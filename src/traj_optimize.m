% This function runs a trajectory optimization on the given scenario structure

% todo:
% DRL needs:
%     Allow "nicer" constraint formulation -- as equations and inequalities, not as functions. Also, assume constraints are satisfied!
% DRL might need/wants:
%     Benchmark to figure out how fmincon calls the functions -- possibly only generate outputs that are necessary.
%     Multiple phases
% My wants:
%     Multiple shooting analytical ODE solve
%     Solve analytically via KKT conditions
%     Generate SQP solvers (active-set, interior-point, combo?).

% Fields of the scenario structure:
% add_params         -- This structure contains information on system parameters not optimized by the optimizer (but which may be quickly changed between optimizations).
%     params             -- Symbolic variables representing the additional parameters (symbolic, optimizer-generated)
%     value              -- The additional parameter vector (numerical, may be user-specified)
% constraints        -- A structure containing information on the nonlinear constraints, as follows:
%     c              -- Nonlinear inequality constraint function (symbolic). c(params)   <= 0
%     c_jac          -- The jacobian of c (symbolic)
%     ceq            -- Nonlinear equality constraint function (symbolic).   ceq(params) == 0
%     ceq_jac        -- Jacobian of ceq (symbolic)
%     colloc         -- Collocation constraints (direct collocation only, symbolic, optimizer-generated)
% duration           -- Duration of the trajectory
% num_duration       -- Numerical value of duration (numerical, generated by traj_gen_numerical)
% inputs             -- Structure containing information on the inputs, as follows:
%     def_input          -- The initial value for the input. Defines its size. (not symbolic, user-defined)
%     inputs             -- All the inputs. The # of rows equals the input size, # of columns depends on shoots and optimizer type. (symbolic, optimizer-generated).
%     lb                 -- Lower bound for the input (may be user-defined)
%     ub                 -- Upper bound for the input (may be user-defined)
% linear_constraints -- A structure containing values for the linear constraints. This structure is as follows:
%     A              -- Linear inequality constraints A function (may be user-specified, may be appended to by optimizer)
%     Aeq            -- Linear equality constraints A function (may be user-specified, may be appended to by optimizer)
%     b              -- Linear inequality constraints b function (may be user-specified, may be appended to by optimizer)
%     beq            -- Linear equality constraints b function (may be user-specified, may be appended to by optimizer)
% method             -- The trajectory optimization method used. 'multiple shooting' or 'direct collocation' (at the moment).
% minimum            -- an array containing the minimum identified by the solver. There is one column per solver run.
% objective          -- A structure containing information about the objective function. Its structure is as follows:
%     dcost              -- The derivative of the cost (at each point where it is known). (symbolic, defined by optimizer)
%     value              -- The value of the objective function (symbolic)
%     jacobian           -- The jacobian of the objective function (symbolic)
%     hessian            -- The hessian of the objective function (symbolic)
% fmincon            -- A structure containing values specific to fmincon, as follows:
%     nonlcon            -- fmincon's nonlinear constraint function
%     objective          -- The objective function called by fmincon
%     options            -- Options structure for fmincon (may be user-specified, may be appended to by optimizer)
% params             -- A structure containing information on the optimization parameters, as follows:
%     init_params        -- The initial value for the parameters
%     lb                 -- Lower bound for parameters. -Inf for no lower bound
%     params             -- The (symbolic) optimization parameters
%     ub                 -- Upper bound for parameters. +Inf for no upper bounda
% shoots             -- The number of "shoots", or timesteps, in the optimization.
% states             -- Structure containing information on the states, as follows:
%     def_state          -- Initial values for the state (defines its size) (not symbolic, user-defined)
%     dstates            -- Derivatives of all the states. This has the same dimensions as scenario.states.states (symbolic, optimizer-generated)
%     num_dstates        -- Numerical value of dstates. (numerical, generated by traj_gen_numerical)
%     approx_dstates     -- Approximated dstates (only for direct collocation).
%     lb                 -- Lower bound for the state (may be user-defined)
%     ub                 -- Upper bound for the state (may be user-defined)
%     states             -- All the states. The # of rows equals the state size, and the # of columns depends on shoots and optimizer type. (symbolic, optimizer-generated)
%     num_states         -- Numerical value of states. (numerical, generated by traj_gen_numerical)
% static_sys_fcn     -- Function for additional constraints and costs, called after most of the optimization setup. (not symbolic, user-defined)
%                       Form: [cost,c,ceq] = static_sys_fcn(scenario)
% system_fcn         -- The system function (not symbolic, user-defined)
% system             -- Structure containing the symbolic form of the system function, as follows:
%     dx                 -- The derivative of the state (symbolic, optimizer-generated)
%     dcost              -- Derivative of cost (symbolic, optimizer-generated)
%     c                  -- Nonlinear inequality constraints (symbolic, optimizer-generated)
%     ceq                -- Nonlinear equality constraints (symbolic, optimizer-generated)

function scenario = traj_optimize(scenario)
	disp('Beginning trajectory optimization')
	scenario = traj_setup(scenario);
	scenario = traj_run_opt(scenario);
end
